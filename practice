# 1. Program to find list of prime numbers in the given list

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

def find_primes(lst):
    return [num for num in lst if is_prime(num)]

# 2. GCD without using library function

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# 3. LCM without using library function

def lcm(a, b):
    return a * b // gcd(a, b)

# 4. Count vowels in a string

def count_vowels(s):
    vowels = "aeiouAEIOU"
    return sum(1 for char in s if char in vowels)

# 5. Frequency of a word in text

def word_frequency(text, word):
    words = text.split()
    return words.count(word)

# 6. Multiplication of all numbers

def multiply_all(numbers):
    result = 1
    for num in numbers:
        result *= num
    return result

# 7. Decimal to binary

def decimal_to_binary(n):
    binary = ""
    if n == 0:
        return "0"
    while n > 0:
        binary = str(n % 2) + binary
        n = n // 2
    return binary

# 8. Decimal to hexadecimal

def decimal_to_hex(n):
    hex_digits = "0123456789ABCDEF"
    hex_val = ""
    if n == 0:
        return "0"
    while n > 0:
        hex_val = hex_digits[n % 16] + hex_val
        n = n // 16
    return hex_val

# 9. Binary to decimal

def binary_to_decimal(binary):
    decimal = 0
    binary = binary[::-1]
    for i in range(len(binary)):
        decimal += int(binary[i]) * (2 ** i)
    return decimal

# 10. Hexadecimal to decimal

def hex_to_decimal(hex_str):
    hex_digits = "0123456789ABCDEF"
    hex_str = hex_str.upper()
    decimal = 0
    for i in range(len(hex_str)):
        decimal = decimal * 16 + hex_digits.index(hex_str[i])
    return decimal

# 11. Add all even-position numbers in the list (1-based index)

def sum_even_positions(lst):
    return sum(lst[i] for i in range(1, len(lst), 2))

# 12. Module for string operations without using libraries
class StringFunctions:
    def length(self, s):
        count = 0
        for _ in s:
            count += 1
        return count

    def compare(self, s1, s2):
        return s1 == s2

    def copy(self, s):
        copied = ""
        for char in s:
            copied += char
        return copied

    def concatenate(self, s1, s2):
        return s1 + s2

    def find_substring(self, s, sub):
        for i in range(len(s) - len(sub) + 1):
            if s[i:i+len(sub)] == sub:
                return True
        return False

# 13. Module for arithmetic operations without using libraries
class ArithmeticOperations:
    def add(self, a, b):
        return a + b

    def subtract(self, a, b):
        return a - b

    def multiply(self, a, b):
        result = 0
        for _ in range(abs(b)):
            result += a
        return result if b >= 0 else -result

    def divide(self, a, b):
        if b == 0:
            return "Division by zero"
        quotient = 0
        negative = False
        if a < 0 or b < 0:
            negative = True
            a, b = abs(a), abs(b)
        while a >= b:
            a -= b
            quotient += 1
        return -quotient if negative else quotient

    def power(self, base, exp):
        result = 1
        for _ in range(exp):
            result *= base
        return result
